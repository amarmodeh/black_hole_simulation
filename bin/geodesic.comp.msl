#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct type_UniformBuffer
{
    packed_float3 CameraPosition;
    float TanHalfFov;
    packed_float3 CameraRight;
    float Aspect;
    packed_float3 CameraUp;
    uint ObjectCount;
    packed_float3 CameraForward;
    float DiskR1;
    float DiskR2;
};

struct Object
{
    packed_float3 Position;
    float Radius;
    packed_float3 Color;
    float Mass;
};

struct type_StructuredBuffer_Object
{
    Object _m0[1];
};

kernel void main0(constant type_UniformBuffer& UniformBuffer [[buffer(0)]], const device type_StructuredBuffer_Object& objects [[buffer(1)]], texture2d<float, access::write> outImage [[texture(0)]], uint3 gl_GlobalInvocationID [[thread_position_in_grid]])
{
    do
    {
        bool _76;
        if (!(gl_GlobalInvocationID.x >= 200u))
        {
            _76 = gl_GlobalInvocationID.y >= 150u;
        }
        else
        {
            _76 = true;
        }
        if (_76)
        {
            break;
        }
        float3 _106 = fast::normalize(((float3(UniformBuffer.CameraRight) * (((((float(gl_GlobalInvocationID.x) + 0.5) * 0.00999999977648258209228515625) - 1.0) * UniformBuffer.Aspect) * UniformBuffer.TanHalfFov)) - (float3(UniformBuffer.CameraUp) * ((1.0 - ((float(gl_GlobalInvocationID.y) + 0.5) * 0.01333333365619182586669921875)) * UniformBuffer.TanHalfFov))) + float3(UniformBuffer.CameraForward));
        float _109 = length(float3(UniformBuffer.CameraPosition));
        float _112 = acos(UniformBuffer.CameraPosition[2] / _109);
        float _115 = precise::atan2(UniformBuffer.CameraPosition[1], UniformBuffer.CameraPosition[0]);
        float _116 = _106.x;
        float _117 = _106.y;
        float _118 = _106.z;
        float _119 = sin(_112);
        float _120 = cos(_115);
        float _123 = sin(_115);
        float _127 = cos(_112);
        float _129 = (((_119 * _120) * _116) + ((_119 * _123) * _117)) + (_127 * _118);
        float _137 = ((((_127 * _120) * _116) + ((_127 * _123) * _117)) - (_119 * _118)) / _109;
        float _143 = (((-_123) * _116) + (_120 * _117)) / (_109 * _119);
        float _145 = 1.0 - (12689999872.0 / _109);
        float _157 = _145 * sqrt(((_129 * _129) / _145) + ((_109 * _109) * ((_137 * _137) + (((_119 * _119) * _143) * _143))));
        float3 _159;
        _159 = float3(UniformBuffer.CameraPosition);
        float3 _160;
        float _167;
        float _169;
        float _171;
        float _173;
        float _175;
        float _177;
        bool _163;
        float _165;
        bool _314;
        bool _162 = false;
        float _164 = 0.0;
        float _166 = _115;
        float _168 = _143;
        float _170 = _137;
        float _172 = _129;
        float _174 = _112;
        float _176 = _109;
        int _178 = 0;
        for (;;)
        {
            if (_178 < 60000)
            {
                if (_176 <= 12689999872.0)
                {
                    outImage.write(float4(0.0, 0.0, 0.0, 1.0), uint2(gl_GlobalInvocationID.xy));
                    _314 = true;
                    break;
                }
                float _189 = 1.0 - (12689999872.0 / _176);
                float _190 = _157 / _189;
                float _192 = (2.0 * _176) * _176;
                float _203 = sin(_174);
                float _210 = (-2.0) * _172;
                float _213 = cos(_174);
                _177 = _176 + (10000000.0 * _172);
                _175 = _174 + (10000000.0 * _170);
                _167 = _166 + (10000000.0 * _168);
                _173 = _172 + (10000000.0 * (((((((-12689999872.0) / _192) * _189) * _190) * _190) + (((12689999872.0 / (_192 * _189)) * _172) * _172)) + (_176 * ((_170 * _170) + (((_203 * _203) * _168) * _168)))));
                _171 = _170 + (10000000.0 * (((_210 * _170) / _176) + (((_203 * _213) * _168) * _168)));
                _169 = _168 + (10000000.0 * (((_210 * _168) / _176) - ((((2.0 * _213) / _203) * _170) * _168)));
                float _232 = _177 * sin(_175);
                float _234 = _232 * cos(_167);
                float _236 = _232 * sin(_167);
                float _238 = _177 * cos(_175);
                _160 = float3(_234, _236, _238);
                float _240 = _164 - distance(_159, _160);
                float _242 = length(float2(_234, _238));
                bool _251;
                if ((_159.y * _236) < 0.0)
                {
                    _251 = _242 >= UniformBuffer.DiskR1;
                }
                else
                {
                    _251 = false;
                }
                bool _257;
                if (_251)
                {
                    _257 = _242 <= UniformBuffer.DiskR2;
                }
                else
                {
                    _257 = false;
                }
                if (_257)
                {
                    float _263 = length(_160) / UniformBuffer.DiskR2;
                    outImage.write(float4(1.0, _263, 0.20000000298023223876953125, _263), uint2(gl_GlobalInvocationID.xy));
                    _314 = true;
                    break;
                }
                if (_240 < 0.0)
                {
                    float _272;
                    float _308;
                    bool _309;
                    float _271 = 1000000015047466219876688855040.0;
                    int _274 = 0;
                    uint _276;
                    for (;;)
                    {
                        _276 = uint(_274);
                        if (_276 < UniformBuffer.ObjectCount)
                        {
                            float _287 = distance(_160, float3(objects._m0[_276].Position)) - objects._m0[_276].Radius;
                            _272 = precise::min(_271, _287);
                            if (_287 > 0.0)
                            {
                                _271 = _272;
                                _274++;
                                continue;
                            }
                            outImage.write(float4(float3(objects._m0[_276].Color) * (0.100000001490116119384765625 + (0.89999997615814208984375 * precise::max(dot(fast::normalize(_160 - float3(objects._m0[_276].Position)), fast::normalize(float3(UniformBuffer.CameraPosition) - _160)), 0.0))), 1.0), uint2(gl_GlobalInvocationID.xy));
                            _308 = _272;
                            _309 = true;
                            break;
                        }
                        else
                        {
                            _308 = _271;
                            _309 = _162;
                            break;
                        }
                    }
                    if (_309)
                    {
                        _314 = _309;
                        break;
                    }
                    _165 = _308;
                    _163 = _309;
                }
                else
                {
                    _165 = _240;
                    _163 = _162;
                }
                if (_177 > 1000000015047466219876688855040.0)
                {
                    _314 = _163;
                    break;
                }
                _159 = _160;
                _162 = _163;
                _164 = _165;
                _166 = _167;
                _168 = _169;
                _170 = _171;
                _172 = _173;
                _174 = _175;
                _176 = _177;
                _178++;
                continue;
            }
            else
            {
                _314 = _162;
                break;
            }
        }
        if (_314)
        {
            break;
        }
        outImage.write(float4(0.0199999995529651641845703125, 0.0199999995529651641845703125, 0.0199999995529651641845703125, 1.0), uint2(gl_GlobalInvocationID.xy));
        break;
    } while(false);
}

